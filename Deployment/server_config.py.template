# How to use
# 1. 复制当前template文件，并删除.template后缀
# 2. 修改当前配置文件中特定的参数


# 启动服务器的状态，是否为Mock状态，如果是Mock状态则直接返回假数据
# 如果只有部分service需要是mock状态，那么这里设为True，需要mock的service根据自己的需要进行调整
IS_MOCK = False
# 是否是测试状态，在非Mock模式下启动，如果是测试状态的话，可以返回具体错误信息，方便进行问题定位
IS_TEST = False
# 当前server的名称
SERVER_NAME = 'DefaultServerName'
# 当前整个大版本的版本信息
DEPLOY_VERSION = 'V1.0.alpha'

# dummy_interface是用来测试当前服务器是否成功启动
AVAILABLE_INTERFACES = [
    ('Deployment.DispatchInterfaces.DummyInterface', '/dummy_interface'),
]
# dummy_service是用来测试service是否成功启动
AVAILABLE_SERVICES = [
    'Deployment.ConsumerServices.DummyService',
]

# dispatch的接口
DISPATCH_SERVER_PORT = 18001
# 每个service的超时秒数
SUBTASK_EXECUTE_TIME_LIMIT_SECONDS = 120
# 任务队列名称
TASK_QUEUE = 'operate_request_queue'


# oss related，需要区分生产环境和测试环境，可以根据自己需要增加更多的环境
OSS_TYPE = 'DUMMY'
OSS_ENVIRONMENT_TYPE = 'Test'
OSS_INFO = {
    "DUMMY": {
        "Test": {
            "ENDPOINT": "",
            "ACCESS_KEY": "",
            "SECRET_KEY": "",
            "REGION": None,
        }
    },  # dummy oss不建议上生产环境
    "MINIO": {
        "Deploy": {
            "ENDPOINT": "",
            "ACCESS_KEY": "",
            "SECRET_KEY": "",
            "REGION": None,
        },
        "Test": {
            "ENDPOINT": "",
            "ACCESS_KEY": "",
            "SECRET_KEY": "",
            "REGION": None,
        }
    },
    "COS": {
        "Deploy": {
            "ACCESS_KEY": "",
            "SECRET_KEY": "",
            "REGION": '',
            "APPID": ''
        },
        "Test": {
            "ACCESS_KEY": "",
            "SECRET_KEY": "",
            "REGION": '',
            "APPID": ''
        }
    }
}[OSS_TYPE][OSS_ENVIRONMENT_TYPE]

# celery related，需要区分生产环境和测试环境，可以根据自己需要增加更多的环境
if IS_TEST:
    WORKER_RABBITMQ_USERNAME = 'guest'
    WORKER_RABBITMQ_PASSWORD = 'guest'
    WORKER_RABBITMQ_HOST = 'localhost'
    WORKER_RABBITMQ_PORT = '5672'
    WORKER_RABBITMQ_VHOST = '/'
else:
    WORKER_RABBITMQ_USERNAME = 'guest'
    WORKER_RABBITMQ_PASSWORD = 'guest'
    WORKER_RABBITMQ_HOST = 'localhost'
    WORKER_RABBITMQ_PORT = '5672'
    WORKER_RABBITMQ_VHOST = '/'

# triton related，作为只读型组件，可以不用区分生产环境与测试环境
# 但是存在一台triton服务器无法将全部模型都加载完成，所以将不同体系的模型可以选择不同的triton进行加载
# 也可以将所有模型使用一台服务器
OCR_TRITON_URL = 'localhost'
OCR_TRITON_PORT = 8001
FACE_TRITON_URL = 'localhost'
FACE_TRITON_PORT = 8001
RECAPTCHA_TRITON_URL = 'localhost'
RECAPTCHA_TRITON_PORT = 8001

# Milvus服务配置【不需要请留None】
MILVUS_URL = None
MILVUS_PORT = 19530